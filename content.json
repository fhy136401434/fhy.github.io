[{"title":"vue常见问题","date":"2018-09-12T01:55:17.000Z","path":"2018/09/12/vue-problem/","text":"1、vue打包后的文件，启动空白页config/index.js文件路径 123456789101112//... module.exports = &#123; //... build: &#123; //... assetsPublicPath: \"./\", //改为相对路径 //... &#125; //... &#125;//... 2、打包过后背景图丢失build/utils.js文件路径 1234567891011121314//...// Extract CSS when that option is specified // (which is the case during production build) if (options.extract) &#123; return ExtractTextPlugin.extract(&#123; use: loaders, publicPath:'../../', //解决build后背景图无法显示问题 fallback: 'vue-style-loader' &#125;) &#125; else &#123; return ['vue-style-loader'].concat(loaders) &#125; //... 3、项目路由模式为history模式，build后空白页默认路由模式为hash模式，但是会有一个问题就是页面的url会有个#，有点影响美观，去掉#最简单的方式就是使用history模式，但是build后会是空白页，解决方法就是1、使用默认的hash模式，2、需要后台配合做一些修改（nginx配置） 4、vue开发中，父组件添加scoped之后，父组件无法修改子组件的样式父组件 12345678910111213&lt;gHeader&gt;&lt;/gHeader&gt;&lt;style&gt;两种写法.g-header /deep/ span.name&#123;&#125;.g-header &gt;&gt;&gt; span.time&#123;&#125;&lt;/style&gt; 子组件 1234567&lt;template&gt; &lt;div class=\"g-header\"&gt; &lt;span class=\"name\"&gt;&lt;/span&gt; &lt;span class=\"time\"&gt;&lt;/span&gt; &lt;/div&gt;&lt;/template&gt; 5、自定义路径别名build/webpack.base.js 1234567891011resolve: &#123; extensions: ['.js', '.vue', '.json'], alias: &#123; 'vue$': 'vue/dist/vue.esm.js', '@': resolve('src'), 'common':resolve('src/common'), 'components':resolve('src/components'), 'api': resolve('src/api'), 'base':resolve('src/base') &#125; 6、获取表单控件的值通常我们可以直接使用 v-model 将表单控件与数据进行绑定，但是有时候我们也会需要在用户输入的时候获取当前值（比如：实时验证当前输入控件内容的有效性）。 这时我们可以使用@input或 @change事件绑定我们自己的处理函数，并传入 $event象以获取当前控件的输入值： 1234567891011&lt;input type=\"text\"/&gt;change (e) &#123; let curVal = e.target.value if (/^\\d+$/.test(curVal)) &#123; this.num = +curVal &#125; else &#123; console.error('%s is not a number!', curVal) &#125;&#125; 7、使用vue-cli开发的跨域问题config/index.js 配置proxyTable 其中，taget是要访问的api的域名，配置完proxyTable后，若要访问，ajax里的url只需设为’/lifeservice/chicken/duck’(即绝对路径)即可，webpack会帮你把’/lifeservice’下的请求转发至 8、mounted钩子函数中请求数据导致页面闪屏问题其实就是加载时机问题，放在created里会比mounted触发早一点，如果在页面挂载完之前请求完成的话就不会看到闪屏了","tags":[]},{"title":"vue-cli项目中获取微信授权","date":"2018-03-10T06:25:24.000Z","path":"2018/03/10/article-title-1/","text":"1、引入微信js-sdk1npm install weixin-js-sdk --save 2、项目中使用1import wx from 'weixin-js-sdk' 3、具体开始使用具体代码如下： 1、template模板 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class=\"wraper\"&gt; &lt;loadmore :height=\"height\" @loadBottom=\"loadBottom\" @loadTop=\"loadTop\" ref=\"loadmores\"&gt; &lt;div&gt; &lt;div class=\"box\"&gt; &lt;mt-swipe :auto=\"2000\"&gt; &lt;mt-swipe-item v-for=\"(item, index) in items\" :key=\"item.id\"&gt; &lt;img :src=\"item.url\" class=\"img\" @click=\"banner(index)\"/&gt; &lt;/mt-swipe-item&gt; &lt;/mt-swipe&gt; &lt;/div&gt; &lt;!--店铺列表--&gt; &lt;div class=\"listWarper\" v-for=\"(item, index) in list\" :key=\"index\"&gt; &lt;div class=\"listBox clearfix\" @click=\"shopInfo(item.shopNum, item.customerNum)\"&gt; &lt;div class=\"boxLeft\"&gt; &lt;img :src=\"item.customerLogo\"&gt; &lt;/div&gt; &lt;div class=\"boxRight\"&gt; &lt;div class=\"boxRightTop\"&gt; &lt;div class=\"clearfix\"&gt; &lt;div class=\"boxRightTopName\"&gt; &#123;&#123;item.shopName&#125;&#125; &lt;/div&gt; &lt;div class=\"boxRightTopDistant\"&gt; &#123;&#123;item.distance&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"boxIntroduce\"&gt; &lt;div class=\"boxVarieties\" v-if=\"item.shopAddress\"&gt;&#123;&#123;item.shopAddress&#125;&#125;&lt;/div&gt; &lt;div class=\"boxVarieties\" v-if=\"item.industryName\"&gt;&#123;&#123;item.industryName&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/loadmore&gt; &lt;/div&gt;&lt;/template&gt; 2、script部分（核心） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160&lt;script&gt; import wx from 'weixin-js-sdk' export default &#123; data() &#123; return &#123; height: 'calc(100vh - 1rem)', name: '111', items: [&#123; title: '图片1', url: require('../../assets/imgs/home_banner.jpg') &#125;, &#123; title: '图片2', url: require('../../assets/imgs/home_banner.jpg') &#125;], lat: '', lng: '', pageNum: 1,//页码 loader: true, list: [],//数据 allLoaded: false, bottomStatus: '', wrapperHeight: 0, topStatus: '', translate: 0, moveTranslate: 0, &#125; &#125;, created() &#123; //授权获取数据 this.getNearInfo(); &#125;, methods: &#123; banner(index) &#123; console.log(`banner$&#123;index&#125;`); &#125;, shopInfo(shopNum, customerNum) &#123; this.$router.push(&#123;path: '/shopList/shopInfo',query: &#123;shopNum,customerNum&#125;&#125;) &#125;, //上拉加载 loadBottom() &#123; this.$refs.loadmores.onBottomLoaded(); if (!this.loader) return; let params = &#123; pageSize: 10, currentPage: this.pageNum, mapLat: this.lat, mapLng: this.lng &#125; this.getNearList(params); &#125;, //下拉刷新 loadTop() &#123; this.loader = true; this.pageNum = 1; this.$refs.loadmores.onTopLoaded(); let params = &#123; currentPage: this.pageNum, pageSize: 10, mapLat: this.lat, mapLng: this.lng &#125; this.getNearList(params) &#125;, getNearInfo() &#123; let _this = this, infoParameter = &#123; requestUrl: encodeURIComponent(window.location.href.split(\"#\")[0]) &#125; //先从后台获取后面需要配置的微信信息 this.$http.getNearInfo(infoParameter).then(res =&gt; &#123; if(res.result == 'success') &#123; let data = res.data, appId = data.appId, nonceStr = data.nonceStr, timestamp = data.timestamp, signature = data.signature; //根据后台返回的配置信息进行配置 wx.config(&#123; debug: false, //必填，true为调试模式，已alert形式弹出 appId: appId, // 必填，公众号的唯一标识 timestamp: timestamp, // 必填，生成签名的时间戳 nonceStr: nonceStr, // 必填，生成签名的随机串 signature: signature, // 必填，签名 jsApiList: ['showOptionMenu', 'onMenuShareTimeline', 'onMenuShareAppMessage', 'getLocation'] // 必填，需要使用的JS接口列表 &#125;); //开始获取用户的位置信息 wx.ready(() =&gt; &#123; wx.getLocation(&#123; type: 'gcj02', //默认为wgs84的gps坐标，如果要返回直接给openLocation用的火星坐标，可传入'gcj02' success: function (res) &#123; //用户点击同意授权的回调函数 _this.lat = res.latitude; // 纬度 _this.lng = res.longitude; // 经度 //list请求 let params = &#123; currentPage: _this.pageNum, pageSize: 10, mapLat: _this.lat, mapLng: _this.lng &#125; //获取列表信息 _this.getNearList(params) &#125;, cancel: function()&#123; //用户点击拒绝授权的回调函数，设置默认位置（天安门） _this.lat = 39.9219; _this.lng = 116.44355; let params = &#123; currentPage: _this.pageNum, pageSize: 10, mapLat: _this.lat, mapLng: _this.lng &#125; //获取列表信息 _this.getNearList(params) &#125;, error: function(err)&#123; console.log('err', err); &#125; &#125;); &#125;) &#125; &#125;).catch(err =&gt; &#123; console.log(err); &#125;) &#125;, getNearList(params) &#123; let pageNum = this.pageNum; if (!this.loader) return; this.$http.getNearList(params).then(res =&gt; &#123; if (res.result == 'success') &#123; let data = res.data, lister = data.list, list = this.list, l = lister.length; if (pageNum &gt; 1) &#123; list = [...list, ...lister]; &#125; else &#123; list = lister; &#125; this.list = list; if (l &lt; 10) &#123; this.loader = false; &#125; else &#123; this.pageNum = (pageNum + 1); this.loader = true; &#125; &#125; &#125;).catch(err =&gt; &#123; &#125;) &#125; &#125; &#125;&lt;/script&gt; 3、css部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;style lang=\"scss\" scoped&gt; .wraper &#123; height: calc(100vh - 1rem); overflow-y: auto; overflow-x: hidden; .box &#123; overflow: hidden; width: 100%; height: 3rem; img &#123; width: 100%; height: 3rem; &#125; &#125; .listBox &#123; width: 93%; margin: 0 auto; background: #fff; position: relative; border-bottom: solid #e6e6e6 1px; padding: .26rem 0; .boxLeft &#123; width: 20%; height: 1.26rem; float: left; img &#123; width: 1.26rem; height: 1.26rem; border: solid #e8e8e8 1px; &#125; &#125; .boxRight &#123; width: 80%; float: left; font-size: .3rem; .boxRightTop &#123; width: 100%; height: 1.28rem; .boxRightTopName &#123; float: left; line-height: .3rem; padding: .1rem 0; font-weight: bold; font-size: .3rem; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; &#125; .boxRightTopDistant &#123; float: right; height: .3rem; line-height: .3rem; font-size: .26rem; font-weight: bolder; color: #aeaeae; &#125; .boxIntroduce &#123; width: 100%; height: .78rem; .boxVarieties &#123; display: inline-block; max-width: 1.2rem; line-height: .78rem; font-size: .24rem; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; color: #aeaeae; padding-right: .2rem; &#125; &#125; &#125; &#125; &#125; &#125;&lt;/style&gt;","tags":[]},{"title":"2017前端现状","date":"2017-07-19T02:22:55.000Z","path":"2017/07/19/trend/","text":"众所周知，前端近几年闹了一场革命。前端在编程领域也掀起了学习潮。至少在中国，从2013年下半年至今，在搜索指数上，有着爆炸式的增长。可以看下数据：百度指数，Google指数。 一边是日新月异的新知识不断的冲击着前端，一边是各种新人疯狂涌入前端领域。这两股新流冲击下，倒是火了很多技术社区、问答网站，如：SegmentFault。 打开SegmentFault，首页问答流上，前端相关的题目（包括Node）,不说占十之八九，那也是半壁江山。即使是在老牌问答网站StackOverflow上，javascript相关的问答也是最多的。 我是很喜欢回答各种问题的人，一直逛着SegmentFault。几个月下来，我看到的出现最频繁的前端问题如下： 12341.Vue、React哪里哪里报错了，求看（React相关的少很多，angular更少）。2.框架相关的一些UI、插件，如ElementUI什么什么组件怎么用、vue-router哪里哪里有问题。3.javascript this指向的问题、闭包的问题、数组循环相关问题等。4.webpack、npm等工程化相关配置问题。 那这些问题的本身有什么问题呢？90%的问题，都可以通过文档查询到。而且大多不是文档偏僻、篇幅少的角落，更多的是诸如vue的父子组件通信这类文档长篇幅说明的问题。 而如this指向、闭包这类问题，以及其他语法上的问题，都是基础知识，而且大多都被网上各种博客讲烂了。想要理解它，闭着眼睛都能搜到。 还有很多问题都是重复式的问题，只要自己网上搜搜，就能找到答案。 这些问题反应了什么现象？123451.确实前端很火，引来了一批批新人。2.前端小白们如火如荼的学习着现在前端流行的新技术栈。3.但大多忽视了基础知识的学习。4.而且不知道提问题的正确姿势。5.甚至有些过分的伸手党。 为什么会这样？我猜测是如下原因： 12341.很多人学前端并非是对前端感兴趣，而是觉得前端门槛低，市场火爆，于是学了前端。没了兴趣就少了耐心，少了耐心就不太想看文档、书籍。2.还有些新人并非科班出生，导致完全不明白编程学习的流程，以为就是靠问。3.培训班也有锅。标榜着几周就能精通前端、搞定大公司。在教学上轻基础、重工具，导致前端学习者急功近利，以为熟练操作vue了就是精通前端了。4.前端新人本身对新知识非常渴望，因为培训班或者自学一段时间后，发现没掌握的知识太多太多，在市场并没有竞争力。所以也会显得比较着急。 如果同学你正好符合我上述所说的，要注意了，你已经误入歧途了。前端门槛是低，但学习曲线不短。想找到一份好工作，也不是会用vue就够的。 我曾经听一个学弟说，自己的目标就是把Vue掌握了写溜了，我表示非常不赞同。 可能很多新人也是这个想法，但是我知道，大多数人所说的掌握，写溜，并非是真正的掌握。其实就是把文档背熟了，熟悉了语法糖，了解了生命周期过程。学习vue是非常好的，但真正的学习它不是就学习它怎么用，而是要深入学习它的设计理念、实现方式、阅读理解源码。 可惜的是，你可能根本看不懂它的源码。为什么？因为基础就没掌握。所以你的目标走偏了，目标应该是要先掌握好Javascript本身。在此之上，你才有可能说自己掌握了Vue。 那什么是正确的学习姿势？1234567891011首先打基础，html，css，js-&gt;es6，这些已经够吃一壶。怎么学？读书、看它们的参考文档，掌握基础用法。在此同时，可以用vue这些框架去做一些工程化的项目实践，遇到不懂的地方，不必过分深究，会浪费很多时间。等你基础掌握到一定阶段，蓦然回首时，会顿时大悟。基础掌握后，工具也能熟练运用了，甚至能快速的掌握它。之后再怎么深入学习，这里就不探讨了。另外，当我们学习一个工具的时候，我们最基础的应该要知道人家到底是个什么？比如学习Vue，首先会介绍它是MVVM框架，你要是连MVVM都不知道，又怎么去学Vue呢？我偶尔会看到一些问题：问在vue中如何去获取dom页面上的数据。原来是用着vue，然后以Jquery操作dom的方式去开发。这就是因为自己都不知道自己用的是什么。我知道，前端知识实在是太多了，比如说node。又够大家吃一壶，难免会遇到问题，解决不了。但又确实需要解决它才能进行项目实践。不可避免的得提问题。 那什么是正确的提问题姿势？123451.遇到出错，首先应该想到的是查阅文档。很多时候我们遇到的问题，是因为自己用的姿势不对，到底怎么用，文档上可能已经写的一清二楚。比如我要在vue2.x的子组件中去修改父组件的传值，我一修改就报错，该怎么办？怎么办？查下文档就一清二楚。2.文档查不到该怎么办？确实有时候，一些问题是文档中没暴露的，或者说没描述清楚的。这时候我们应该先在网上搜索该问题。哪儿搜？Google，项目本身的Issue，百度虽然大家都不喜欢，但真的去搜百度也无可厚非。3.别人也没遇到怎么办？如果是工具本身的问题，首先想到的应该是看源码，源码实在看不懂或者理解不了，再去提问。4.其他一些业务上的实现问题，自己确实没能力实现，可以去提问。5.但提问题不仅仅是为了解决当下问题，更重要的是提高自己解决问题的能力。 第五点，我再单独说一下。有时候我会看到一些问题的最佳答案，并非是真正的最佳答案。很多题主，就想着能直接帮他解决当下问题就好。而有的答案虽然没有直接给出代码，却给了非常好的思路或解释，亦或者给了其他更好的设计方案，亦或者是给了某些相关的文档链接。 本来是授人以鱼不如授人以渔，但有些人却只要现成的鱼。","tags":[]},{"title":"js深拷贝","date":"2017-01-05T10:20:15.000Z","path":"2017/01/05/article-title/","text":"js深拷贝1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859export const $ = function() &#123; var copyIsArray, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, class2type = &#123; '[object Boolean]': 'boolean', '[object Number]': 'number', '[object String]': 'string', '[object Function]': 'function', '[object Array]': 'array', '[object Date]': 'date', '[object RegExp]': 'regExp', '[object Object]': 'object' &#125;, type = function(obj) &#123; return obj == null ? String(obj) : class2type[toString.call(obj)] || \"object\"; &#125;, isWindow = function(obj) &#123; return obj &amp;&amp; typeof obj === \"object\" &amp;&amp; \"setInterval\" in obj; &#125;, isArray = Array.isArray || function(obj) &#123; return type(obj) === \"array\"; &#125;, isPlainObject = function(obj) &#123; if (!obj || type(obj) !== \"object\" || obj.nodeType || isWindow(obj)) &#123; return false; &#125; if (obj.constructor &amp;&amp; !hasOwn.call(obj, \"constructor\") &amp;&amp; !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) &#123; return false; &#125; var key; for (key in obj) &#123;&#125; return key === undefined || hasOwn.call(obj, key); &#125;, extend = function(deep, target, options) &#123; for (var name in options) &#123; var src = target[name]; var copy = options[name]; if (target === copy) &#123; continue; &#125; if (deep &amp;&amp; copy &amp;&amp; (isPlainObject(copy) || (copyIsArray = isArray(copy)))) &#123; if (copyIsArray) &#123; copyIsArray = false; var clone = src &amp;&amp; isArray(src) ? src : []; &#125; else &#123; var clone = src &amp;&amp; isPlainObject(src) ? src : &#123;&#125;; &#125; target[name] = extend(deep, clone, copy); &#125; else if (copy !== undefined) &#123; target[name] = copy; &#125; &#125; return target; &#125;; return &#123; extend: extend &#125;;&#125;();","tags":[]},{"title":"左边固定宽度，右边自适应的几种实现方案","date":"2016-11-10T06:20:55.000Z","path":"2016/11/10/adapt-title/","text":"左边固定宽度，右边自适应的几种实现方案html结构都如下 1234&lt;div class=\"wrapper\"&gt; &lt;div class=\"left\"&gt;22&lt;/div&gt; &lt;div class=\"right\"&gt;11&lt;/div&gt;&lt;/div&gt; css为了方便去除了margin和padding 1234* &#123; margin: 0; padding: 0;&#125; 1、双inline-block实现方案12345678910111213141516171819.wrapper &#123; width: 100vw; height: 100vh; font-size: 0; /*去除空格影响*/ box-sizing: border-box;&#125;.wrapper div &#123; display: inline-block; box-sizing: border-box; height: 100vh;&#125;.left &#123; width: 120px; background: red;&#125;.right &#123; width: calc(100% - 120px); background: blue;&#125; 2、双float实现方案12345678910111213141516.wrapper &#123; width: 100vw; height: 100vh;&#125;.wrapper div &#123; float: left; height: 100%;&#125;.left &#123; width: 120px; background: red;&#125;.right &#123; width: calc(100% - 120px); background: blue;&#125; 3、float + margin-left实现方案123456789101112131415.wrapper &#123; width: 100vw; height: 100vh;&#125;.left &#123; width: 120px; height: 100vh; background: red; float: left;&#125;.right &#123; margin-left: 120px; background: blue; height: 100vh;&#125; 4、absolute + margin-left实现方案123456789101112131415.wrapper &#123; width: 100vw; height: 100vh;&#125;.left &#123; position: absolute; width: 120px; height: 100vh; background: red;&#125;.right &#123; margin-left: 120px; height: 100vh; background: blue;&#125; 5、float + BFC实现方案123456789101112131415.wrapper &#123; width: 100vw; height: 100vh;&#125;.left &#123; float: left; width: 120px; height: 100vh; background: red;&#125;.right &#123; height: 100vh; overflow: auto; background: blue;&#125; 6、flex实现方案123456789101112131415161718.wrapper &#123; width: 100vw; height: 100vh; display: flex; /* flex容器的一个默认属性值:align-items: stretch;。这个属性导致了为了让两个盒子高度自动，需要设置: align-items: flex-start; */ align-items: flex-start;&#125;.left &#123; width: 120px; height: 100vh; flex: 0 0 auto; background: red;&#125;.right &#123; height: 100vh; flex: 1 1 auto; background: blue;&#125; 总结以上六种该方案实现，其中1、2方案都是利用calc计算属性来实现右侧自适应，1方案中因为都是inline-block，需要设置font-size： 0;来去除空格影响,不设置会出现两个之间会有间隔，导致右边盒子掉到下一行，第3种方案，左边盒子左浮动，右边盒子不浮动，如果不设置margin-left会导致右边盒子覆盖在左边盒子上面，第4种实现方案与第3种实现方案相同。利用左边盒子脱离文档流设置margin-left。第五种左边浮动，右边如果不设置overflow：auto;不会触发元素的BFC，如果不触发元素的BFC会导致，右边的盒子叠在左边盒子上面，触发元素的BFC后，作用就是让右边的盒子不与左边的盒子重叠。第六种实现用的flex，左边的盒子固定宽，设置flex：0 0 auto或者flex: none;不会根据布局伸缩，右边盒子设置flex: 1 1 auto;为弹性盒子，充满剩余部分，还有就是父级盒子设置align-items: flex-start;是因为flex容器的一个默认属性值:align-items: stretch;。这个属性导致了为了让两个盒子高度自动，需要设置: align-items: flex-start;","tags":[]},{"title":"常用正则表达式收藏","date":"2016-07-23T11:15:29.000Z","path":"2016/07/23/regular/","text":"常用正则表达式收藏干的没有一点水分的干货，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。 一、检验数字的表达式 1234567891011121314151617181920数字：^[0-9]*$n位的数字：^\\d&#123;n&#125;$至少n位的数字：^\\d&#123;n,&#125;$m-n位的数字：^\\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$非负整数：^\\d+$ 或 ^[1-9]\\d*|0$非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$ 二、校验字符的表达式123456789101112汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$可以输入含有^%&amp;',;=?$\\\"等字符：[^%&amp;',;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+ 三、特殊需求表达式12345678910111213141516171819202122232425262728293031323334Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;身份证号(15位、18位数字)：^\\d&#123;15&#125;|\\d&#123;18&#125;$短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$钱的输入格式：有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\\u4e00-\\u9fa5]双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)首尾空白字符的正则表达式：^\\s*|\\s*$ 或 (^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))","tags":[]},{"title":"Hello World","date":"2016-04-13T07:25:27.000Z","path":"2016/04/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]